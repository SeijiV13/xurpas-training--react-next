{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { blogActionTypes } from \"./actions\";\nconst blogInitialState = {\n  allBlogs: [],\n  selectedBlog: null,\n  blogFormAction: null\n};\nexport default ((state = blogInitialState, action) => {\n  switch (action.type) {\n    case blogActionTypes.GET_ALL_BLOGS:\n      return _objectSpread({}, state, {\n        allBlogs: action.data\n      });\n\n    case blogActionTypes.SET_SELECTED_BLOG:\n      return _objectSpread({}, state, {\n        selectedBlog: action.data\n      });\n\n    case blogActionTypes.SET_BLOG_FORM_ACTION:\n      return _objectSpread({}, state, {\n        blogFormAction: action.data\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/dellp/Documents/Seminar Resources/RakSquad Training Materials/RakSquad Xurpas React/xurpas-training-next/store/blogs/reducers.js"],"names":["blogActionTypes","blogInitialState","allBlogs","selectedBlog","blogFormAction","state","action","type","GET_ALL_BLOGS","data","SET_SELECTED_BLOG","SET_BLOG_FORM_ACTION"],"mappings":";;;;;;AAAA,SAASA,eAAT,QAAgC,WAAhC;AAEA,MAAMC,gBAAgB,GAAG;AACrBC,EAAAA,QAAQ,EAAE,EADW;AAErBC,EAAAA,YAAY,EAAE,IAFO;AAGrBC,EAAAA,cAAc,EAAE;AAHK,CAAzB;AAMA,gBAAe,CAACC,KAAK,GAAGJ,gBAAT,EAA2BK,MAA3B,KAAsC;AACjD,UAAOA,MAAM,CAACC,IAAd;AACG,SAAKP,eAAe,CAACQ,aAArB;AACA,+BACOH,KADP;AAEIH,QAAAA,QAAQ,EAAEI,MAAM,CAACG;AAFrB;;AAIA,SAAKT,eAAe,CAACU,iBAArB;AACA,+BACOL,KADP;AAEIF,QAAAA,YAAY,EAAEG,MAAM,CAACG;AAFzB;;AAIA,SAAKT,eAAe,CAACW,oBAArB;AACA,+BACON,KADP;AAEID,QAAAA,cAAc,EAAEE,MAAM,CAACG;AAF3B;;AAIA;AACA,aAAOJ,KAAP;AAjBH;AAmBH,CApBD","sourcesContent":["import { blogActionTypes } from \"./actions\";\r\n\r\nconst blogInitialState = {\r\n    allBlogs: [],\r\n    selectedBlog: null,\r\n    blogFormAction: null,\r\n}\r\n\r\nexport default (state = blogInitialState, action) => {\r\n    switch(action.type) {\r\n       case blogActionTypes.GET_ALL_BLOGS: \r\n       return {\r\n           ...state,\r\n           allBlogs: action.data\r\n       }\r\n       case blogActionTypes.SET_SELECTED_BLOG:\r\n       return {\r\n           ...state,\r\n           selectedBlog: action.data\r\n       }\r\n       case blogActionTypes.SET_BLOG_FORM_ACTION:\r\n       return {\r\n           ...state,\r\n           blogFormAction: action.data\r\n       }\r\n       default: \r\n       return state;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}