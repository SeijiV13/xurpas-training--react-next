{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'React';\nimport Layout from '../components/Layout';\nimport { bindActionCreators } from 'redux';\nimport * as blogActions from '../store/blogs/actions';\nimport { connect } from 'react-redux';\nimport BlogList from '../components/BlogList';\nimport { throws } from 'assert';\nimport Router from 'next/router';\nimport { Button } from 'react-bootstrap';\nimport { actions as toastrActions } from 'react-redux-toastr';\n\nclass Index extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      blogs: Object.assign({}, this.props.blogs)\n    };\n    this.selectBlog = this.selectBlog.bind(this);\n  }\n\n  render() {\n    const {\n      blogs\n    } = this.props;\n    return __jsx(Layout, null, __jsx(BlogList, {\n      blogs: blogs,\n      onClick: data => this.selectBlog(data)\n    }), __jsx(Button, {\n      onClick: () => this.selectBlog({\n        blog: null,\n        action: \"create\"\n      })\n    }, \"Create Blog\"));\n  }\n\n  componentDidMount() {\n    this.props.actions.getAllBlogs();\n  }\n\n  selectBlog(data) {\n    if (data.action === \"delete\") {\n      this.props.actions.deleteBlog(data.blog.id).then(() => {\n        this.props.actions.getAllBlogs();\n        this.props.toastr.add({\n          position: 'top-right',\n          type: 'success',\n          title: \"Deletion Successfull\",\n          message: `Successfully deleted ${data.blog.title}`\n        });\n      });\n      return;\n    }\n\n    this.props.actions.setSelectedBlog(data.blog);\n    this.props.actions.setBlogFormAction(data.action);\n    Router.push('/blogform');\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    blogs: state.blogs.allBlogs\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(Object.assign({}, blogActions), dispatch),\n    toastr: bindActionCreators(Object.assign({}, toastrActions), dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","map":null,"metadata":{},"sourceType":"module"}