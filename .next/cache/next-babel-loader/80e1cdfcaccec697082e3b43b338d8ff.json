{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport { bindActionCreators } from \"redux\";\nimport { connect } from \"react-redux\";\nimport * as blogActions from '../store/blogs/actions';\nimport Layout from \"../components/Layout\";\nimport TextInput from \"../components/TextInput\";\nimport { Button } from \"react-bootstrap\";\nimport Router from \"next/router\";\n\nclass BlogForm extends React.Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      selectedBlog: Object.assign({}, this.props.selectedBlog),\n      blogFormAction: this.props.blogFormAction\n    };\n    this.saveBlog = this.saveBlog.bind(this);\n    this.updateState = this.updateState.bind(this);\n  }\n\n  render() {\n    let blogFormAction = this.state.blogFormAction;\n    let isDisabled = false;\n\n    if (blogFormAction === 'view') {\n      isDisabled = true;\n    }\n\n    return __jsx(Layout, null, __jsx(TextInput, {\n      name: \"title\",\n      value: this.state.selectedBlog.title ? this.state.selectedBlog.title : \"\",\n      label: \"Title\",\n      onChange: this.updateState,\n      disabled: isDisabled\n    }), __jsx(TextInput, {\n      name: \"description\",\n      value: this.state.selectedBlog.description ? this.state.selectedBlog.description : \"\",\n      label: \"Description\",\n      onChange: this.updateState,\n      disabled: isDisabled\n    }), blogFormAction !== 'view' ? __jsx(Button, {\n      variant: \"primary\",\n      onClick: this.saveBlog\n    }, \"Submit\") : \"\");\n  }\n\n  updateState(event) {\n    let field = event.target.name;\n    let selectedBlog = Object.assign({}, this.state.selectedBlog);\n    selectedBlog[field] = event.target.value;\n    return this.setState({\n      selectedBlog\n    });\n  }\n\n  saveBlog() {\n    if (this.state.blogFormAction === 'create') {\n      this.props.actions.createBlog(this.state.selectedBlog).then(() => {\n        Router.push(\"/\");\n      });\n    } else if (this.state.blogFormAction === 'edit') {\n      this.props.actions.updateBlog(this.state.selectedBlog).then(() => {\n        Router.push(\"/\");\n      });\n    }\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    selectedBlog: state.blogs.selectedBlog,\n    blogFormAction: state.blogs.blogFormAction\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    actions: bindActionCreators(Object.assign({}, blogActions), dispatch)\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlogForm);","map":null,"metadata":{},"sourceType":"module"}